###############################################################################
# Bazel now uses Bzlmod by default to manage external dependencies.
# Please consider migrating your external dependencies from WORKSPACE to MODULE.bazel.
#
# For more details, please check https://github.com/bazelbuild/bazel/issues/18958
###############################################################################
module(
    version = "0.1.0",
    repo_name = "meeting_bot",
)

bazel_dep(name = "bazel_skylib", version = "1.5.0")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "apple_support", version = "1.15.1", repo_name = "build_bazel_apple_support")
bazel_dep(name = "rules_apple", version = "3.5.1", repo_name = "build_bazel_rules_apple")
bazel_dep(name = "rules_python", version = "0.32.2")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(python_version = "3.11")
use_repo(python, "python_3_11")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = "3.11",
    requirements_linux = "//third_party:requirements_linux_lock.txt",
    requirements_lock = "//third_party:requirements_lock.txt",
)
use_repo(pip, "pip")

bazel_dep(name = "rules_foreign_cc", version = "0.10.1")
git_override(
    module_name = "rules_foreign_cc",
    commit = "0ed9aaa68282f8a7de56ae4f96191891a75d4dfb",
    patch_strip = 1,
    patches = [
        "//third_party/rules_foreign_cc:update_meson.patch",
        "//third_party/rules_foreign_cc:rules_foreign_cc_module_bazel.patch",
    ],
    remote = "https://github.com/bazelbuild/rules_foreign_cc",
)

bazel_dep(name = "rules_proto", version = "6.0.0")
bazel_dep(name = "protobuf", version = "27.1", repo_name = "com_google_protobuf")
bazel_dep(name = "abseil-cpp", version = "20240116.2", repo_name = "com_google_absl")
bazel_dep(name = "glog", version = "0.7.0", repo_name = "com_github_glog_glog")
bazel_dep(name = "googletest", version = "1.14.0.bcr.1", repo_name = "com_google_googletest")
bazel_dep(name = "re2", version = "2024-06-01", repo_name = "com_googlesource_code_re2")
bazel_dep(name = "grpc", version = "1.64.2")
archive_override(
    module_name = "grpc",
    integrity = "sha256-xoL8ObrvxugE1zXmtIFBFXtyE2Asxm2+C/N1uQTYtfk=",
    patch_strip = 1,
    patches = [
        "//third_party/grpc:adopt_bzlmod.patch",
        "//third_party/grpc:add_module_bazel.patch",
    ],
    strip_prefix = "grpc-1.64.2",
    urls = "https://github.com/grpc/grpc/archive/refs/tags/v1.64.2.tar.gz",
)

bazel_dep(name = "rules_oci", version = "1.7.6")
# For testing, we also recommend https://registry.bazel.build/modules/container_structure_test

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# Declare external images you need to pull, for example:
oci.pull(
    name = "base",
    image = "debian",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
    # 'latest' is not reproducible, but it's convenient.
    # During the build we print a WARNING message that includes recommended 'digest' and 'platforms'
    # values which you can use here in place of 'tag' to pin for reproducibility.
    tag = "bookworm-20240612",
)

# For each oci.pull call, repeat the "name" here to expose them as dependencies.
use_repo(oci, "base")

bazel_dep(name = "rules_pkg", version = "1.0.0")

# TODO(d61h6l4) Remove after PR merged:
# https://github.com/bazelbuild/bazel-central-registry/pull/2180
archive_override(
    module_name = "rules_pkg",
    strip_prefix = "rules_pkg-1.0.0",
    urls = "https://github.com/bazelbuild/rules_pkg/archive/refs/tags/1.0.0.tar.gz",
)

bazel_dep(name = "container_structure_test", version = "1.16.0")
bazel_dep(name = "aspect_bazel_lib", version = "2.7.3")
bazel_dep(name = "rules_distroless", version = "0.3.3")

# TODO(d61h6k4) Remove after merging PR:
# https://github.com/GoogleContainerTools/rules_distroless/pull/50
git_override(
    module_name = "rules_distroless",
    commit = "f06d81a716997253d5dff0b9db5c71d36e82cad3",
    remote = "https://github.com/jacobshirley/rules_distroless",
)

apt = use_extension("@rules_distroless//apt:extensions.bzl", "apt")
apt.deb_index(
    name = "bookworm",
    lock = "//docker:bookworm.lock.json",
    manifest = "//docker:bookworm.yaml",
)
use_repo(apt, "bookworm")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

_MEDIAPIPE_VERSION = "0.10.14"

http_archive(
    name = "mediapipe",
    patch_args = ["-p1"],
    patches = [
        # Remove npm and js dependencies
        "//third_party/mediapipe:mediapipe_framework_port_build_config.patch",
        "//third_party/mediapipe:mediapipe_framework_tool_mediapipe_proto.patch",
        # Remove tensorflow dependency
        "//third_party/mediapipe:mediapipe_framework_tool_mediapipe_graph.patch",
        # Use local opencv and libyuv
        "//third_party/mediapipe:mediapipe_framework_port_build.patch",
        "//third_party/mediapipe:mediapipe_calculators_image_build.patch",
        # Fix building re2.h
        "//third_party/mediapipe:mediapipe_framework_deps_re2.patch",
    ],
    sha256 = "9d46fa5363f5c4e11c3d1faec71b0746f15c5aab7b5460d0e5655d7af93c6957",
    strip_prefix = "mediapipe-{}".format(_MEDIAPIPE_VERSION),
    url = "https://github.com/google/mediapipe/archive/refs/tags/v{}.tar.gz".format(_MEDIAPIPE_VERSION),
)

bazel_dep(name = "libyuv", version = "0.1.0", repo_name = "libyuv")
archive_override(
    module_name = "libyuv",
    patches = [
        "@//third_party/libyuv:BUILD.patch",
        "@//third_party/libyuv:MODULE.bazel.patch",
        "@//third_party/libyuv:WORKSPACE.patch",
    ],
    urls = "https://chromium.googlesource.com/libyuv/libyuv/+archive/914624f0b8b92986ef385e9650ee7b5fb07099e9.tar.gz",
)

# sudo apt-get install yasm
bazel_dep(name = "ffmpeg", version = "7.0.1")
archive_override(
    module_name = "ffmpeg",
    integrity = "sha256-75CuPnGURNopHjzB6nB+/lXADRYx3EELHbbmVP7VmvQ=",
    patches = [
        "//third_party/ffmpeg:BUILD.patch",
        "//third_party/ffmpeg:MODULE.bazel.patch",
        # Respect CC env variable
        "//third_party/ffmpeg:configure.patch",
    ],
    strip_prefix = "FFmpeg-n7.0.1",
    urls = "https://github.com/FFmpeg/FFmpeg/archive/refs/tags/n7.0.1.zip",
)

bazel_dep(name = "iconv", version = "1.17.0", repo_name = "iconv")
archive_override(
    module_name = "iconv",
    integrity = "sha256-j3QhO1YjjIWlClMp934GGYdx5w3Zpzl3n0wC9l2XExM=",
    patches = [
        "@//third_party/iconv:BUILD.patch",
        "@//third_party/iconv:MODULE.bazel.patch",
    ],
    strip_prefix = "libiconv-1.17",
    urls = "https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.17.tar.gz",
)

# libxcb (ffmpeg uses to capture the screen)
bazel_dep(name = "libxcb", version = "1.16.0")
archive_override(
    module_name = "libxcb",
    integrity = "sha256-vA91+Eso5klqGaHQlNfkfe+GGlDLfM5bI7Yu7NwqRHk=",
    patches = [
        "//third_party/libxcb:BUILD.patch",
        "//third_party/libxcb:MODULE.bazel.patch",
    ],
    strip_prefix = "libxcb-1.16",
    urls = "https://xorg.freedesktop.org/archive/individual/lib/libxcb-1.16.tar.gz",
)

bazel_dep(name = "xcb_proto", version = "1.16.0")
archive_override(
    module_name = "xcb_proto",
    integrity = "sha256-2cfwELEQX8OFi/B7UWmy3Y50k8ZlKx/kXzMh2HTykdc=",
    patches = [
        "//third_party/xcb_proto:BUILD.patch",
        "//third_party/xcb_proto:MODULE.bazel.patch",
    ],
    strip_prefix = "xcb-proto-1.16.0",
    urls = "https://xorg.freedesktop.org/archive/individual/proto/xcb-proto-1.16.0.tar.gz",
)

bazel_dep(name = "libxau", version = "1.0.11")
archive_override(
    module_name = "libxau",
    integrity = "sha256-8/oygvVXDD9r1iAkRDjb+91YD8gPAvVJWHoPirMpu+s=",
    patches = [
        "//third_party/libxau:BUILD.patch",
        "//third_party/libxau:MODULE.bazel.patch",
    ],
    strip_prefix = "libXau-1.0.11",
    urls = "https://www.x.org/pub/individual/lib/libXau-1.0.11.tar.xz",
)

bazel_dep(name = "xorgproto", version = "2024.1")
archive_override(
    module_name = "xorgproto",
    integrity = "sha256-NyIl/UCBW4QjVH9diQxd68cuiLkQiPv7ExWMIElcy1k=",
    patches = [
        "//third_party/xorgproto:BUILD.patch",
        "//third_party/xorgproto:MODULE.bazel.patch",
    ],
    strip_prefix = "xorgproto-2024.1",
    urls = "https://xorg.freedesktop.org/archive/individual/proto/xorgproto-2024.1.tar.xz",
)

bazel_dep(name = "util_macros", version = "1.20.1")
archive_override(
    module_name = "util_macros",
    integrity = "sha256-CzCPYtznisD02d5oiCNL8XDydrZKx8lumXebtDGbzvU=",
    patches = [
        "//third_party/util_macros:BUILD.patch",
        "//third_party/util_macros:MODULE.bazel.patch",
    ],
    strip_prefix = "util-macros-1.20.1",
    urls = "https://www.x.org/pub/individual/util/util-macros-1.20.1.tar.xz",
)
# end of libxcb dependencies

bazel_dep(name = "pulseaudio", version = "17.0")
archive_override(
    module_name = "pulseaudio",
    integrity = "sha256-lmk9cpvU1XbZ9pipCfl64hpf/kvKaixLzjj1t/I0R3s=",
    patches = [
        "//third_party/pulseaudio:BUILD.patch",
        "//third_party/pulseaudio:MODULE.bazel.patch",
        "//third_party/pulseaudio:.tarball-version.patch",
    ],
    strip_prefix = "pulseaudio-17.0",
    urls = "https://github.com/pulseaudio/pulseaudio/archive/refs/tags/v17.0.zip",
)

# pulseaudio dependencies
bazel_dep(name = "libsndfile", version = "1.2.2")
archive_override(
    module_name = "libsndfile",
    integrity = "sha256-N5nKmSTTElA4iANnvxRo5TobfjaGqTTwmLfh0obNuA4=",
    patches = [
        "//third_party/libsndfile:BUILD.patch",
        "//third_party/libsndfile:MODULE.bazel.patch",
    ],
    strip_prefix = "libsndfile-1.2.2",
    urls = "https://github.com/libsndfile/libsndfile/releases/download/1.2.2/libsndfile-1.2.2.tar.xz",
)

bazel_dep(name = "tdb", version = "1.4.10")
archive_override(
    module_name = "tdb",
    integrity = "sha256-AjOOM8FsIcnilXHO9SPnaytwhjYlT28wxs8ZXUjGLa8=",
    patches = [
        "//third_party/tdb:BUILD.patch",
        "//third_party/tdb:MODULE.bazel.patch",
    ],
    strip_prefix = "tdb-1.4.10",
    urls = "https://www.samba.org/ftp/tdb/tdb-1.4.10.tar.gz",
)

bazel_dep(name = "check", version = "0.15.2")
archive_override(
    module_name = "check",
    integrity = "sha256-qN5OC6z7TXbdHGGN7SY1I7U7hdkqFG2INesaUpMvogo=",
    patches = [
        "//third_party/check:BUILD.patch",
        "//third_party/check:MODULE.bazel.patch",
    ],
    strip_prefix = "check-0.15.2",
    urls = "https://github.com/libcheck/check/releases/download/0.15.2/check-0.15.2.tar.gz",
)
# endof pulseaudio dependencies

bazel_dep(name = "opencv", version = "3.4.20", repo_name = "opencv")
archive_override(
    module_name = "opencv",
    integrity = "sha256-ggmL0iHRiqdaAbDukeyhRsWGgQcwZwlyElczDaVPAHQ=",
    patches = [
        "@//third_party/opencv:BUILD.patch",
        "@//third_party/opencv:MODULE.bazel.patch",
    ],
    strip_prefix = "opencv-3.4.20",
    urls = "https://github.com/opencv/opencv/archive/refs/tags/3.4.20.zip",
)

# opencv deps
bazel_dep(name = "imath", version = "3.1.9")
bazel_dep(name = "zlib", version = "1.3.1")
bazel_dep(name = "libpng", version = "1.6.40")
bazel_dep(name = "libjpeg_turbo", version = "2.1.91")

ONNX_VERSION = "1.18.0"

bazel_dep(name = "onnxruntime_osx_arm64", version = ONNX_VERSION, repo_name = "onnxruntime_osx_arm64")
archive_override(
    module_name = "onnxruntime_osx_arm64",
    integrity = "sha256-xf9SDSkT4zYGcJecpP5DcX/DqgwMNnp1+7by8VwMtI0=",
    patches = [
        "@//third_party/onnxruntime_osx_arm64:BUILD.patch",
        "@//third_party/onnxruntime_osx_arm64:MODULE.bazel.patch",
    ],
    strip_prefix = "onnxruntime-osx-arm64-{}".format(ONNX_VERSION),
    urls = "https://github.com/microsoft/onnxruntime/releases/download/v{}/onnxruntime-osx-arm64-{}.tgz".format(ONNX_VERSION, ONNX_VERSION),
)

bazel_dep(name = "onnxruntime_linux_x64", version = ONNX_VERSION)
archive_override(
    module_name = "onnxruntime_linux_x64",
    integrity = "sha256-+k0Rs/obK/HDsu+o+VhjS8NO3JXjUawqBAjGrVxVBPA=",
    patches = [
        "@//third_party/onnxruntime_linux_x64:BUILD.patch",
        "@//third_party/onnxruntime_linux_x64:MODULE.bazel.patch",
    ],
    strip_prefix = "onnxruntime-linux-x64-{}".format(ONNX_VERSION),
    urls = "https://github.com/microsoft/onnxruntime/releases/download/v{}/onnxruntime-linux-x64-{}.tgz".format(ONNX_VERSION, ONNX_VERSION),
)

bazel_dep(name = "gsl", version = "4.0.0")
archive_override(
    module_name = "gsl",
    integrity = "sha256-65H8sQpqpcyx0iTgelbI7P/pobtgH6GEgnbsRqIgC/s=",
    patches = [
        "@//third_party/gsl:BUILD.patch",
        "@//third_party/gsl:MODULE.bazel.patch",
    ],
    strip_prefix = "GSL-4.0.0",
    urls = "https://github.com/microsoft/GSL/archive/refs/tags/v4.0.0.zip",
)

bazel_dep(name = "onnxruntime_extensions", version = "0.11.0")
git_override(
    module_name = "onnxruntime_extensions",
    commit = "f1abea14e88422a16e8337f86820bf306b506c61",
    patches = [
        "@//third_party/onnxruntime_extensions:BUILD.patch",
        "@//third_party/onnxruntime_extensions:MODULE.bazel.patch",
    ],
    remote = "https://github.com/microsoft/onnxruntime-extensions.git",
)

bazel_dep(name = "onnxruntime_genai", version = "0.3.0")
archive_override(
    module_name = "onnxruntime_genai",
    integrity = "sha256-j1pr2zaxvCwfNEONKPbYEntoogjsUXkRC6NmORXzLa4=",
    patches = [
        "@//third_party/onnxruntime_genai:BUILD.patch",
        "@//third_party/onnxruntime_genai:MODULE.bazel.patch",
    ],
    strip_prefix = "onnxruntime-genai-0.3.0",
    urls = "https://github.com/microsoft/onnxruntime-genai/archive/refs/tags/v0.3.0.tar.gz",
)

# linter
bazel_dep(name = "aspect_rules_lint", version = "0.21.0")
bazel_dep(name = "buildifier_prebuilt", version = "6.4.0")

# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    commit = "204aa593e002cbd177d30f11f54cff3559110bb9",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
    # Replace the commit hash (above) with the latest (https://github.com/hedronvision/bazel-compile-commands-extractor/commits/main).
    # Even better, set up Renovate and let it do the work for you (see "Suggestion: Updates" in the README).
)
